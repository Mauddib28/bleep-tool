"""BLEEP Analysis mode – post-process enumeration JSON dumps.

A lightweight replacement for legacy *Modules/analysis_mode.py*.
"""
from __future__ import annotations

import argparse
import json
import sys
from pathlib import Path

from bleep.core.log import print_and_log, LOG__GENERAL


def _arg_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(prog="bleep-analyse", add_help=False)
    p.add_argument("files", nargs="+", metavar="FILE", help="JSON file(s) generated by exploration mode")
    p.add_argument("--help", "-h", action="help")
    p.add_argument("--detailed", "-d", action="store_true", help="Show detailed analysis including characteristics")
    return p


def _summarise(data: dict, detailed: bool = False):
    # Handle both old format (Services at top level) and new format (device.services)
    if "Services" in data:
        # Old format
        svcs = data.get("Services", {})
        print_and_log(f"  Services: {len(svcs)}", LOG__GENERAL)
        char_total = sum(len(v.get("Characteristics", {})) for v in svcs.values())
        print_and_log(f"  Characteristics: {char_total}", LOG__GENERAL)
        
        if detailed:
            for svc_uuid, svc_data in svcs.items():
                print_and_log(f"  Service: {svc_uuid}", LOG__GENERAL)
                chars = svc_data.get("Characteristics", {})
                for char_uuid, char_data in chars.items():
                    print_and_log(f"    Characteristic: {char_uuid}", LOG__GENERAL)
                    if "Value" in char_data:
                        print_and_log(f"      Value: {char_data['Value']}", LOG__GENERAL)
    
    elif "device" in data and "services" in data["device"]:
        # New format from explore command
        device = data["device"]
        svcs = device["services"]
        print_and_log(f"  Device: {device.get('name', 'Unknown')} ({device.get('address', 'Unknown')})", LOG__GENERAL)
        print_and_log(f"  Services: {len(svcs)}", LOG__GENERAL)
        char_total = sum(len(svc.get("characteristics", [])) for svc in svcs)
        print_and_log(f"  Characteristics: {char_total}", LOG__GENERAL)
        
        # Print service details
        if detailed:
            for svc in svcs:
                print_and_log(f"\n  Service: {svc.get('uuid', 'Unknown')}", LOG__GENERAL)
                print_and_log(f"    Path: {svc.get('path', 'Unknown')}", LOG__GENERAL)
                
                chars = svc.get("characteristics", [])
                for char in chars:
                    print_and_log(f"    Characteristic: {char.get('uuid', 'Unknown')}", LOG__GENERAL)
                    print_and_log(f"      Handle: 0x{char.get('handle', 0):04x}", LOG__GENERAL)
                    print_and_log(f"      Flags: {', '.join(char.get('flags', []))}", LOG__GENERAL)
                    
                    # Print descriptors if available
                    descs = char.get("descriptors", [])
                    if descs and len(descs) > 0:
                        print_and_log(f"      Descriptors: {len(descs)}", LOG__GENERAL)
                        for desc in descs:
                            print_and_log(f"        {desc.get('uuid', 'Unknown')}", LOG__GENERAL)
    else:
        print_and_log("  Unknown JSON format. No services found.", LOG__GENERAL)


def main(argv: list[str] | None = None):  # noqa: D401 – CLI entry
    argv = argv or sys.argv[1:]
    args = _arg_parser().parse_args(argv)

    for file_path in args.files:
        path = Path(file_path).expanduser()
        if not path.exists():
            print_and_log(f"[-] File not found: {path}", LOG__GENERAL)
            continue
        with path.open() as f:
            try:
                data = json.load(f)
            except Exception as e:
                print_and_log(f"[-] Failed to parse {path}: {e}", LOG__GENERAL)
                continue
        print_and_log(f"[*] Summary for {path}", LOG__GENERAL)
        _summarise(data, detailed=args.detailed)


if __name__ == "__main__":  # pragma: no cover
    main() 